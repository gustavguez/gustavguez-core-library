import * as momentImported from 'moment';
const moment = momentImported;
export class DateUtility {
    static todayLocaleString() {
        const today = moment();
        return DateUtility.localeString(today);
    }
    static todayDateString() {
        const today = moment();
        return today.format("YYYY-MM-DD");
    }
    static localeString(date) {
        return date.format("YYYY-MM-DD") + "T" + date.format("HH:mm");
    }
    static todayAsPrettyString() {
        const today = moment();
        return today.format("DD/MM/YYYY");
    }
    static prettyDate(date, displayHour) {
        const d = moment(date);
        let str = d.format("DD/MM/YYYY");
        if (displayHour) {
            str += " " + DateUtility.prettyHour(date);
        }
        return str;
    }
    static prettyHour(date) {
        const d = moment(date);
        return d.format("HH:mm");
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS51dGlsaXR5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWd1c3Rhdmd1ZXotY29yZS8iLCJzb3VyY2VzIjpbImxpYi91dGlsaXRpZXMvZGF0ZS51dGlsaXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxjQUFjLE1BQU0sUUFBUSxDQUFDO0FBRXpDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUU5QixNQUFNLE9BQU8sV0FBVztJQUVwQixNQUFNLENBQUMsaUJBQWlCO1FBQ3BCLE1BQU0sS0FBSyxHQUFRLE1BQU0sRUFBRSxDQUFDO1FBQzVCLE9BQU8sV0FBVyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRUQsTUFBTSxDQUFDLGVBQWU7UUFDbEIsTUFBTSxLQUFLLEdBQVEsTUFBTSxFQUFFLENBQUM7UUFDNUIsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRCxNQUFNLENBQUMsWUFBWSxDQUFDLElBQVM7UUFDekIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFRCxNQUFNLENBQUMsbUJBQW1CO1FBQ3RCLE1BQU0sS0FBSyxHQUFRLE1BQU0sRUFBRSxDQUFDO1FBQzVCLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQTtJQUNyQyxDQUFDO0lBRUQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFZLEVBQUUsV0FBcUI7UUFDakQsTUFBTSxDQUFDLEdBQVEsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVCLElBQUksR0FBRyxHQUFXLENBQUMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUE7UUFFeEMsSUFBRyxXQUFXLEVBQUM7WUFDWCxHQUFHLElBQUksR0FBRyxHQUFHLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDN0M7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFFRCxNQUFNLENBQUMsVUFBVSxDQUFDLElBQVk7UUFDMUIsTUFBTSxDQUFDLEdBQVEsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVCLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUM1QixDQUFDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBtb21lbnRJbXBvcnRlZCBmcm9tICdtb21lbnQnOyBcblxuY29uc3QgbW9tZW50ID0gbW9tZW50SW1wb3J0ZWQ7XG5cbmV4cG9ydCBjbGFzcyBEYXRlVXRpbGl0eSB7XG5cbiAgICBzdGF0aWMgdG9kYXlMb2NhbGVTdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgdG9kYXk6IGFueSA9IG1vbWVudCgpO1xuICAgICAgICByZXR1cm4gRGF0ZVV0aWxpdHkubG9jYWxlU3RyaW5nKHRvZGF5KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgdG9kYXlEYXRlU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IHRvZGF5OiBhbnkgPSBtb21lbnQoKTtcbiAgICAgICAgcmV0dXJuIHRvZGF5LmZvcm1hdChcIllZWVktTU0tRERcIik7XG4gICAgfVxuXG4gICAgc3RhdGljIGxvY2FsZVN0cmluZyhkYXRlOiBhbnkpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gZGF0ZS5mb3JtYXQoXCJZWVlZLU1NLUREXCIpICsgXCJUXCIgKyBkYXRlLmZvcm1hdChcIkhIOm1tXCIpO1xuICAgIH1cbiAgICBcbiAgICBzdGF0aWMgdG9kYXlBc1ByZXR0eVN0cmluZygpe1xuICAgICAgICBjb25zdCB0b2RheTogYW55ID0gbW9tZW50KCk7XG4gICAgICAgIHJldHVybiB0b2RheS5mb3JtYXQoXCJERC9NTS9ZWVlZXCIpXG4gICAgfVxuXG4gICAgc3RhdGljIHByZXR0eURhdGUoZGF0ZTogc3RyaW5nLCBkaXNwbGF5SG91cj86IGJvb2xlYW4pOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBkOiBhbnkgPSBtb21lbnQoZGF0ZSk7XG4gICAgICAgIGxldCBzdHI6IHN0cmluZyA9IGQuZm9ybWF0KFwiREQvTU0vWVlZWVwiKVxuXG4gICAgICAgIGlmKGRpc3BsYXlIb3VyKXtcbiAgICAgICAgICAgIHN0ciArPSBcIiBcIiArIERhdGVVdGlsaXR5LnByZXR0eUhvdXIoZGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG5cbiAgICBzdGF0aWMgcHJldHR5SG91cihkYXRlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBkOiBhbnkgPSBtb21lbnQoZGF0ZSk7XG4gICAgICAgIHJldHVybiBkLmZvcm1hdChcIkhIOm1tXCIpXG4gICAgfVxuXG59Il19