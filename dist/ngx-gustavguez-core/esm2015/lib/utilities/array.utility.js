export default class ArrayUtility {
    //Suggest current timezone hours
    static find(items, id, callback, compareKey) {
        //Check id key
        const key = compareKey ? compareKey : 'id';
        //Check items
        if (items instanceof Array) {
            let found = false;
            //Found it
            items.every((item, index) => {
                found = item[key] == id;
                if (found) {
                    callback(item, index);
                }
                return !found;
            });
        }
    }
    static each(items, callback) {
        //Array
        if (items instanceof Array) {
            items.forEach((item, index) => {
                callback(item, index);
            });
        }
        else if (items && (typeof items === 'object')) {
            //Object
            for (let index in items) {
                callback(items[index], index);
            }
        }
    }
    static every(items, callback) {
        if (items instanceof Array) {
            items.every((item, index) => {
                return callback(item, index);
            });
        }
    }
    static getDisplayKeys(items, idKey, displayKey) {
        let displayKeys = {};
        //Default keys
        idKey = idKey ? idKey : 'id';
        displayKey = displayKey ? displayKey : 'name';
        //Each
        ArrayUtility.each(items, (obj) => {
            displayKeys[obj[idKey]] = obj[displayKey];
        });
        return displayKeys;
    }
    static getSelectedKeys(items) {
        let selected = [];
        //Iterate
        ArrayUtility.each(items, (val, key) => {
            if (val)
                selected.push(key);
        });
        return selected;
    }
    static filter(items, callback) {
        if (items instanceof Array) {
            let result = items.filter((item, index) => {
                return callback(item, index);
            });
            return result;
        }
    }
    static map(items, callback) {
        let result = [];
        if (items instanceof Array) {
            result = items.map((item, index) => {
                return callback(item, index);
            });
        }
        return result;
    }
    static sort(items, compareKey) {
        let result = items.sort((a, b) => {
            if (a[compareKey] < b[compareKey])
                return -1;
            if (a[compareKey] > b[compareKey])
                return 1;
            return 0;
        });
        return result;
    }
    static hasValue(items) {
        return (items instanceof Array && items.length > 0);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyYXkudXRpbGl0eS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1ndXN0YXZndWV6LWNvcmUvIiwic291cmNlcyI6WyJsaWIvdXRpbGl0aWVzL2FycmF5LnV0aWxpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE9BQU8sT0FBTyxZQUFZO0lBRWhDLGdDQUFnQztJQUNoQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQVksRUFBRSxFQUFPLEVBQUUsUUFBa0IsRUFBRSxVQUFtQjtRQUN6RSxjQUFjO1FBQ2QsTUFBTSxHQUFHLEdBQVcsVUFBVSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUVuRCxhQUFhO1FBQ2IsSUFBRyxLQUFLLFlBQVksS0FBSyxFQUFDO1lBQ3pCLElBQUksS0FBSyxHQUFZLEtBQUssQ0FBQztZQUUzQixVQUFVO1lBQ1YsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQVMsRUFBRSxLQUFhLEVBQUUsRUFBRTtnQkFDeEMsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBRXhCLElBQUcsS0FBSyxFQUFDO29CQUNSLFFBQVEsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7aUJBQ3RCO2dCQUNELE9BQU8sQ0FBQyxLQUFLLENBQUM7WUFDZixDQUFDLENBQUMsQ0FBQztTQUNIO0lBQ0YsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBVSxFQUFFLFFBQWtCO1FBQ3pDLE9BQU87UUFDUCxJQUFHLEtBQUssWUFBWSxLQUFLLEVBQUM7WUFDekIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQVMsRUFBRSxLQUFhLEVBQUUsRUFBRTtnQkFDMUMsUUFBUSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztZQUN2QixDQUFDLENBQUMsQ0FBQTtTQUNGO2FBQUssSUFBSSxLQUFLLElBQUksQ0FBQyxPQUFPLEtBQUssS0FB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QUM7WUFDVixPQUFPLENBQUMsQ0FBQztRQUNWLENBQUMsQ0FBQyxDQUFDO1FBQ0csT0FBTyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUVELE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBWTtRQUMzQixPQUFPLENBQUMsS0FBSyxZQUFZLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBRXBELENBQUM7Q0FDRCIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIEFycmF5VXRpbGl0eSB7XG5cdFxuXHQvL1N1Z2dlc3QgY3VycmVudCB0aW1lem9uZSBob3Vyc1xuXHRzdGF0aWMgZmluZChpdGVtczogYW55W10sIGlkOiBhbnksIGNhbGxiYWNrOiBGdW5jdGlvbiwgY29tcGFyZUtleT86IHN0cmluZyk6IHZvaWR7XG5cdFx0Ly9DaGVjayBpZCBrZXlcblx0XHRjb25zdCBrZXk6IHN0cmluZyA9IGNvbXBhcmVLZXkgPyBjb21wYXJlS2V5IDogJ2lkJztcblxuXHRcdC8vQ2hlY2sgaXRlbXNcblx0XHRpZihpdGVtcyBpbnN0YW5jZW9mIEFycmF5KXtcblx0XHRcdGxldCBmb3VuZDogYm9vbGVhbiA9IGZhbHNlO1xuXG5cdFx0XHQvL0ZvdW5kIGl0XG5cdFx0XHRpdGVtcy5ldmVyeSgoaXRlbTogYW55LCBpbmRleDogbnVtYmVyKSA9PiB7XG5cdFx0XHRcdGZvdW5kID0gaXRlbVtrZXldID09IGlkO1xuXG5cdFx0XHRcdGlmKGZvdW5kKXtcblx0XHRcdFx0XHRjYWxsYmFjayhpdGVtLCBpbmRleCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuICFmb3VuZDtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdHN0YXRpYyBlYWNoKGl0ZW1zOiBhbnksIGNhbGxiYWNrOiBGdW5jdGlvbik6IHZvaWR7XG5cdFx0Ly9BcnJheVxuXHRcdGlmKGl0ZW1zIGluc3RhbmNlb2YgQXJyYXkpe1xuXHRcdFx0aXRlbXMuZm9yRWFjaCgoaXRlbTogYW55LCBpbmRleDogbnVtYmVyKSA9PiB7XG5cdFx0XHRcdGNhbGxiYWNrKGl0ZW0sIGluZGV4KTtcblx0XHRcdH0pXG5cdFx0fWVsc2UgaWYgKGl0ZW1zICYmICh0eXBlb2YgaXRlbXMgPT09ICdvYmplY3QnKSl7XG5cdFx0XHQvL09iamVjdFxuXHRcdFx0Zm9yKGxldCBpbmRleCBpbiBpdGVtcyl7XG5cdFx0XHRcdGNhbGxiYWNrKGl0ZW1zW2luZGV4XSwgaW5kZXgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHN0YXRpYyBldmVyeShpdGVtczogYW55W10sIGNhbGxiYWNrOiBGdW5jdGlvbik6IHZvaWR7XG5cdFx0aWYoaXRlbXMgaW5zdGFuY2VvZiBBcnJheSl7XG5cdFx0XHRpdGVtcy5ldmVyeSgoaXRlbTogYW55LCBpbmRleDogbnVtYmVyKSA9PiB7XG5cdFx0XHRcdHJldHVybiBjYWxsYmFjayhpdGVtLCBpbmRleCk7XG5cdFx0XHR9KVxuXHRcdH1cblx0fVxuXG5cdHN0YXRpYyBnZXREaXNwbGF5S2V5cyhpdGVtczogYW55W10sIGlkS2V5Pzogc3RyaW5nLCBkaXNwbGF5S2V5Pzogc3RyaW5nKTogYW55IHtcblx0XHRsZXQgZGlzcGxheUtleXM6IGFueSA9IHt9O1xuXG5cdFx0Ly9EZWZhdWx0IGtleXNcblx0XHRpZEtleSA9IGlkS2V5ID8gaWRLZXkgOiAnaWQnO1xuXHRcdGRpc3BsYXlLZXkgPSBkaXNwbGF5S2V5ID8gZGlzcGxheUtleSA6ICduYW1lJztcblxuXHRcdC8vRWFjaFxuXHRcdEFycmF5VXRpbGl0eS5lYWNoKGl0ZW1zLCAob2JqOiBhbnkpID0+IHtcblx0XHRcdGRpc3BsYXlLZXlzW29ialtpZEtleV1dID0gb2JqW2Rpc3BsYXlLZXldO1xuXHRcdH0pO1xuXHRcdHJldHVybiBkaXNwbGF5S2V5cztcblx0fVxuXG5cdHN0YXRpYyBnZXRTZWxlY3RlZEtleXMoaXRlbXM6IFtdKTogYW55W10ge1xuXHRcdGxldCBzZWxlY3RlZDogYW55W10gPSBbXTtcblxuXHRcdC8vSXRlcmF0ZVxuXHRcdEFycmF5VXRpbGl0eS5lYWNoKGl0ZW1zLCAodmFsOiBib29sZWFuLCBrZXk6IGFueSkgPT4ge1xuXHRcdFx0aWYodmFsKSBzZWxlY3RlZC5wdXNoKGtleSk7XG5cdFx0fSlcblxuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHN0YXRpYyBmaWx0ZXIoaXRlbXM6IGFueVtdLCBjYWxsYmFjazogRnVuY3Rpb24pOiBhbnlbXXtcblx0XHRpZihpdGVtcyBpbnN0YW5jZW9mIEFycmF5KXtcbiAgICAgICAgICAgIGxldCByZXN1bHQ6IGFueVtdID0gaXRlbXMuZmlsdGVyKChpdGVtOiBhbnksIGluZGV4OiBudW1iZXIpID0+IHtcblx0XHRcdFx0cmV0dXJuIGNhbGxiYWNrKGl0ZW0sIGluZGV4KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRzdGF0aWMgbWFwKGl0ZW1zOiBhbnlbXSwgY2FsbGJhY2s6IEZ1bmN0aW9uKTogYW55W117XG4gICAgICAgIGxldCByZXN1bHQ6IGFueVtdID0gW107XG5cdFx0aWYoaXRlbXMgaW5zdGFuY2VvZiBBcnJheSl7XG5cdFx0XHRyZXN1bHQgPSBpdGVtcy5tYXAoKGl0ZW06IGFueSwgaW5kZXg6IG51bWJlcikgPT4ge1xuXHRcdFx0XHRyZXR1cm4gY2FsbGJhY2soaXRlbSwgaW5kZXgpO1xuXHRcdFx0fSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0c3RhdGljIHNvcnQoaXRlbXM6IGFueVtdLCBjb21wYXJlS2V5OiBzdHJpbmcpOiBhbnlbXXtcblx0XHRsZXQgcmVzdWx0OiBhbnlbXSA9IGl0ZW1zLnNvcnQoKGE6IGFueSwgYjogYW55KSA9PiB7XG5cdFx0XHRpZiAoYVtjb21wYXJlS2V5XSA8IGJbY29tcGFyZUtleV0pXG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdGlmIChhW2NvbXBhcmVLZXldID4gYltjb21wYXJlS2V5XSlcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdHN0YXRpYyBoYXNWYWx1ZShpdGVtczogYW55W10pOiBib29sZWFue1xuXHRcdHJldHVybiAoaXRlbXMgaW5zdGFuY2VvZiBBcnJheSAmJiBpdGVtcy5sZW5ndGggPiAwKVxuXG5cdH1cbn0iXX0=