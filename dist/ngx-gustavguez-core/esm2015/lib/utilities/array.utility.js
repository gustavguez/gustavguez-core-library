export class ArrayUtility {
    // Suggest current timezone hours
    static find(items, id, callback, compareKey) {
        // Check id key
        const key = compareKey ? compareKey : 'id';
        // Check items
        if (items instanceof Array) {
            let found = false;
            // Found it
            items.every((item, index) => {
                found = item[key] === id;
                if (found) {
                    callback(item, index);
                }
                return !found;
            });
        }
    }
    static each(items, callback) {
        // Array
        if (items instanceof Array) {
            items.forEach((item, index) => {
                callback(item, index);
            });
        }
        else if (items && typeof items === 'object') {
            // Object
            for (const index in items) {
                callback(items[index], index);
            }
        }
    }
    static every(items, callback) {
        if (items instanceof Array) {
            items.every((item, index) => callback(item, index));
        }
    }
    static getDisplayKeys(items, idKey, displayKey) {
        const displayKeys = {};
        // Default keys
        idKey = idKey ? idKey : 'id';
        displayKey = displayKey ? displayKey : 'name';
        // Each
        ArrayUtility.each(items, (obj) => {
            displayKeys[obj[idKey]] = obj[displayKey];
        });
        return displayKeys;
    }
    static getSelectedKeys(items) {
        const selected = [];
        // Iterate
        ArrayUtility.each(items, (val, key) => {
            if (val) {
                selected.push(key);
            }
        });
        return selected;
    }
    static filter(items, callback) {
        let result = [];
        if (items instanceof Array) {
            result = items.filter((item, index) => callback(item, index));
        }
        return result;
    }
    static map(items, callback) {
        let result = [];
        if (items instanceof Array) {
            result = items.map((item, index) => callback(item, index));
        }
        return result;
    }
    static sort(items, compareKey) {
        const result = items.sort((itemA, itemB) => {
            if (itemA[compareKey] < itemB[compareKey]) {
                return -1;
            }
            if (itemA[compareKey] > itemB[compareKey]) {
                return 1;
            }
            return 0;
        });
        return result;
    }
    static hasValue(items) {
        return items instanceof Array && items.length > 0;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyYXkudXRpbGl0eS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1ndXN0YXZndWV6LWNvcmUvIiwic291cmNlcyI6WyJsaWIvdXRpbGl0aWVzL2FycmF5LnV0aWxpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLFlBQVk7SUFFeEIsaUNBQWlDO0lBQ2pDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBWSxFQUFFLEVBQU8sRUFBRSxRQUFrQixFQUFFLFVBQW1CO1FBQ3pFLGVBQWU7UUFDZixNQUFNLEdBQUcsR0FBVyxVQUFVLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBRW5ELGNBQWM7UUFDZCxJQUFJLEtBQUssWUFBWSxLQUFLLEVBQUU7WUFDM0IsSUFBSSxLQUFLLEdBQVksS0FBSyxDQUFDO1lBRTNCLFdBQVc7WUFDWCxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBUyxFQUFFLEtBQWEsRUFBRSxFQUFFO2dCQUN4QyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFFekIsSUFBSSxLQUFLLEVBQUU7b0JBQ1YsUUFBUSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztpQkFDdEI7Z0JBQ0QsT0FBTyxDQUFDLEtBQUssQ0FBQztZQUNmLENBQUMsQ0FBQyxDQUFDO1NBQ0g7SUFDRixDQUFDO0lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFVLEVBQUUsUUFBa0I7UUFDekMsUUFBUTtRQUNSLElBQUksS0FBSyxZQUFZLEtBQUssRUFBRTtZQUMzQixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBUyxFQUFFLEtBQWEsRUFBRSxFQUFFO2dCQUMxQyxRQUFRLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3ZCLENBQUMsQ0FBQyxDQUFDO1NBQ0g7YUFBTSxJQUFJLEtBQUssSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7WUFD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LENBQUMsQ0FBQztRQUNILE9BQU8sTUFBTSxDQUFDO0lBQ2YsQ0FBQztJQUVELE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBWTtRQUMzQixPQUFPLEtBQUssWUFBWSxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDbkQsQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIEFycmF5VXRpbGl0eSB7XG5cblx0Ly8gU3VnZ2VzdCBjdXJyZW50IHRpbWV6b25lIGhvdXJzXG5cdHN0YXRpYyBmaW5kKGl0ZW1zOiBhbnlbXSwgaWQ6IGFueSwgY2FsbGJhY2s6IEZ1bmN0aW9uLCBjb21wYXJlS2V5Pzogc3RyaW5nKTogdm9pZCB7XG5cdFx0Ly8gQ2hlY2sgaWQga2V5XG5cdFx0Y29uc3Qga2V5OiBzdHJpbmcgPSBjb21wYXJlS2V5ID8gY29tcGFyZUtleSA6ICdpZCc7XG5cblx0XHQvLyBDaGVjayBpdGVtc1xuXHRcdGlmIChpdGVtcyBpbnN0YW5jZW9mIEFycmF5KSB7XG5cdFx0XHRsZXQgZm91bmQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuXHRcdFx0Ly8gRm91bmQgaXRcblx0XHRcdGl0ZW1zLmV2ZXJ5KChpdGVtOiBhbnksIGluZGV4OiBudW1iZXIpID0+IHtcblx0XHRcdFx0Zm91bmQgPSBpdGVtW2tleV0gPT09IGlkO1xuXG5cdFx0XHRcdGlmIChmb3VuZCkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKGl0ZW0sIGluZGV4KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gIWZvdW5kO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0c3RhdGljIGVhY2goaXRlbXM6IGFueSwgY2FsbGJhY2s6IEZ1bmN0aW9uKTogdm9pZCB7XG5cdFx0Ly8gQXJyYXlcblx0XHRpZiAoaXRlbXMgaW5zdGFuY2VvZiBBcnJheSkge1xuXHRcdFx0aXRlbXMuZm9yRWFjaCgoaXRlbTogYW55LCBpbmRleDogbnVtYmVyKSA9PiB7XG5cdFx0XHRcdGNhbGxiYWNrKGl0ZW0sIGluZGV4KTtcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSBpZiAoaXRlbXMgJiYgdHlwZW9mIGl0ZW1zID09PSAnb2JqZWN0Jykge1xuXHRcdFx0Ly8gT2JqZWN0XG5cdFx0XHRmb3IgKGNvbnN0IGluZGV4IGluIGl0ZW1zKSB7XG5cdFx0XHRcdGNhbGxiYWNrKGl0ZW1zW2luZGV4XSwgaW5kZXgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHN0YXRpYyBldmVyeShpdGVtczogYW55W10sIGNhbGxiYWNrOiBGdW5jdGlvbik6IHZvaWQge1xuXHRcdGlmIChpdGVtcyBpbnN0YW5jZW9mIEFycmF5KSB7XG5cdFx0XHRpdGVtcy5ldmVyeSgoaXRlbTogYW55LCBpbmRleDogbnVtYmVyKSA9PiBjYWxsYmFjayhpdGVtLCBpbmRleCkpO1xuXHRcdH1cblx0fVxuXG5cdHN0YXRpYyBnZXREaXNwbGF5S2V5cyhpdGVtczogYW55W10sIGlkS2V5Pzogc3RyaW5nLCBkaXNwbGF5S2V5Pzogc3RyaW5nKTogYW55IHtcblx0XHRjb25zdCBkaXNwbGF5S2V5czogYW55ID0ge307XG5cblx0XHQvLyBEZWZhdWx0IGtleXNcblx0XHRpZEtleSA9IGlkS2V5ID8gaWRLZXkgOiAnaWQnO1xuXHRcdGRpc3BsYXlLZXkgPSBkaXNwbGF5S2V5ID8gZGlzcGxheUtleSA6ICduYW1lJztcblxuXHRcdC8vIEVhY2hcblx0XHRBcnJheVV0aWxpdHkuZWFjaChpdGVtcywgKG9iajogYW55KSA9PiB7XG5cdFx0XHRkaXNwbGF5S2V5c1tvYmpbaWRLZXldXSA9IG9ialtkaXNwbGF5S2V5XTtcblx0XHR9KTtcblx0XHRyZXR1cm4gZGlzcGxheUtleXM7XG5cdH1cblxuXHRzdGF0aWMgZ2V0U2VsZWN0ZWRLZXlzKGl0ZW1zOiBbXSk6IGFueVtdIHtcblx0XHRjb25zdCBzZWxlY3RlZDogYW55W10gPSBbXTtcblxuXHRcdC8vIEl0ZXJhdGVcblx0XHRBcnJheVV0aWxpdHkuZWFjaChpdGVtcywgKHZhbDogYm9vbGVhbiwga2V5OiBhbnkpID0+IHtcblx0XHRcdGlmICh2YWwpIHtcblx0XHRcdFx0c2VsZWN0ZWQucHVzaChrZXkpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHN0YXRpYyBmaWx0ZXIoaXRlbXM6IGFueVtdLCBjYWxsYmFjazogRnVuY3Rpb24pOiBhbnlbXSB7XG5cdFx0bGV0IHJlc3VsdDogYW55W10gPSBbXTtcblx0XHRpZiAoaXRlbXMgaW5zdGFuY2VvZiBBcnJheSkge1xuXHRcdFx0cmVzdWx0ID0gaXRlbXMuZmlsdGVyKChpdGVtOiBhbnksIGluZGV4OiBudW1iZXIpID0+IGNhbGxiYWNrKGl0ZW0sIGluZGV4KSk7XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRzdGF0aWMgbWFwKGl0ZW1zOiBhbnlbXSwgY2FsbGJhY2s6IEZ1bmN0aW9uKTogYW55W10ge1xuXHRcdGxldCByZXN1bHQ6IGFueVtdID0gW107XG5cdFx0aWYgKGl0ZW1zIGluc3RhbmNlb2YgQXJyYXkpIHtcblx0XHRcdHJlc3VsdCA9IGl0ZW1zLm1hcCgoaXRlbTogYW55LCBpbmRleDogbnVtYmVyKSA9PiBjYWxsYmFjayhpdGVtLCBpbmRleCkpO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0c3RhdGljIHNvcnQoaXRlbXM6IGFueVtdLCBjb21wYXJlS2V5OiBzdHJpbmcpOiBhbnlbXSB7XG5cdFx0Y29uc3QgcmVzdWx0OiBhbnlbXSA9IGl0ZW1zLnNvcnQoKGl0ZW1BOiBhbnksIGl0ZW1COiBhbnkpID0+IHtcblx0XHRcdGlmIChpdGVtQVtjb21wYXJlS2V5XSA8IGl0ZW1CW2NvbXBhcmVLZXldKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHRcdGlmIChpdGVtQVtjb21wYXJlS2V5XSA+IGl0ZW1CW2NvbXBhcmVLZXldKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fSk7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdHN0YXRpYyBoYXNWYWx1ZShpdGVtczogYW55W10pOiBib29sZWFuIHtcblx0XHRyZXR1cm4gaXRlbXMgaW5zdGFuY2VvZiBBcnJheSAmJiBpdGVtcy5sZW5ndGggPiAwO1xuXHR9XG59XG4iXX0=